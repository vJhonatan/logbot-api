// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using logbot.Database;

#nullable disable

namespace logbot.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("logbot.Models.AutomatedReplyModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Platform")
                        .HasColumnType("integer");

                    b.Property<string>("ReplyMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TriggerMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AutomatedReplies");
                });

            modelBuilder.Entity("logbot.Models.CompanyModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("logbot.Models.ConversationLogModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyIdId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConversationIdId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeIdId")
                        .HasColumnType("uuid");

                    b.Property<string>("MessageReceived")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MessageSent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Platform")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompanyIdId");

                    b.HasIndex("ConversationIdId");

                    b.HasIndex("EmployeeIdId");

                    b.ToTable("ConversationLogs");
                });

            modelBuilder.Entity("logbot.Models.ConversationModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyIdId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompanyIdId");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("logbot.Models.ConversationStepModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ConversationIdId")
                        .HasColumnType("uuid");

                    b.Property<int>("ExpectedResponseType")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("NextStepId")
                        .HasColumnType("uuid");

                    b.Property<int>("StepOrder")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ConversationIdId");

                    b.ToTable("ConversationSteps");
                });

            modelBuilder.Entity("logbot.Models.EmployeeModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyIdId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("Permissions")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompanyIdId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("logbot.Models.MessageModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyIdId")
                        .HasColumnType("uuid");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Platform")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReceivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Responded")
                        .HasColumnType("boolean");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyIdId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("logbot.Models.OrderItemModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderIdId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProductIdId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderIdId");

                    b.HasIndex("ProductIdId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("logbot.Models.OrderModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("logbot.Models.PaymentModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("CompanyIdId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderIdId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyIdId");

                    b.HasIndex("OrderIdId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("logbot.Models.PermissionModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("logbot.Models.ProductModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("logbot.Models.UserResponseModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConversationIdId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeIdId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ReceivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ResponseContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("StepIdId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ConversationIdId");

                    b.HasIndex("EmployeeIdId");

                    b.HasIndex("StepIdId");

                    b.ToTable("UserResponses");
                });

            modelBuilder.Entity("logbot.Models.ConversationLogModel", b =>
                {
                    b.HasOne("logbot.Models.CompanyModel", "CompanyId")
                        .WithMany()
                        .HasForeignKey("CompanyIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("logbot.Models.ConversationModel", "ConversationId")
                        .WithMany()
                        .HasForeignKey("ConversationIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("logbot.Models.EmployeeModel", "EmployeeId")
                        .WithMany()
                        .HasForeignKey("EmployeeIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyId");

                    b.Navigation("ConversationId");

                    b.Navigation("EmployeeId");
                });

            modelBuilder.Entity("logbot.Models.ConversationModel", b =>
                {
                    b.HasOne("logbot.Models.CompanyModel", "CompanyId")
                        .WithMany()
                        .HasForeignKey("CompanyIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyId");
                });

            modelBuilder.Entity("logbot.Models.ConversationStepModel", b =>
                {
                    b.HasOne("logbot.Models.ConversationModel", "ConversationId")
                        .WithMany()
                        .HasForeignKey("ConversationIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConversationId");
                });

            modelBuilder.Entity("logbot.Models.EmployeeModel", b =>
                {
                    b.HasOne("logbot.Models.CompanyModel", "CompanyId")
                        .WithMany()
                        .HasForeignKey("CompanyIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyId");
                });

            modelBuilder.Entity("logbot.Models.MessageModel", b =>
                {
                    b.HasOne("logbot.Models.CompanyModel", "CompanyId")
                        .WithMany()
                        .HasForeignKey("CompanyIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyId");
                });

            modelBuilder.Entity("logbot.Models.OrderItemModel", b =>
                {
                    b.HasOne("logbot.Models.OrderModel", "OrderId")
                        .WithMany()
                        .HasForeignKey("OrderIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("logbot.Models.ProductModel", "ProductId")
                        .WithMany()
                        .HasForeignKey("ProductIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderId");

                    b.Navigation("ProductId");
                });

            modelBuilder.Entity("logbot.Models.PaymentModel", b =>
                {
                    b.HasOne("logbot.Models.CompanyModel", "CompanyId")
                        .WithMany()
                        .HasForeignKey("CompanyIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("logbot.Models.OrderModel", "OrderId")
                        .WithMany()
                        .HasForeignKey("OrderIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyId");

                    b.Navigation("OrderId");
                });

            modelBuilder.Entity("logbot.Models.UserResponseModel", b =>
                {
                    b.HasOne("logbot.Models.ConversationModel", "ConversationId")
                        .WithMany()
                        .HasForeignKey("ConversationIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("logbot.Models.EmployeeModel", "EmployeeId")
                        .WithMany()
                        .HasForeignKey("EmployeeIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("logbot.Models.ConversationStepModel", "StepId")
                        .WithMany()
                        .HasForeignKey("StepIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConversationId");

                    b.Navigation("EmployeeId");

                    b.Navigation("StepId");
                });
#pragma warning restore 612, 618
        }
    }
}
